
export function initSambalEntry(): string {
    return`
    import { template, isSchemaType } from "sambal";

    export function renderPage({ page, options }) {
        return template\`
            <html>
                <head>
                    <meta charSet="UTF-8" />
                    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
                    <meta httpEquiv="X-UA-Compatible" content="ie=edge"/>
                    <link rel="stylesheet" href="css/style.css">
                    <script type="text/javascript" src="js/bundle.js"></script>
                </head>
                <body>
                    \${isSchemaType(page.mainEntity, "article") ? 
                        renderBlogPost({ mainEntity: page.mainEntity }) : 
                        renderLanding({ mainEntity: page.mainEntity, options: options })}
                </body>
            </html>
        \`;
    }
    
    
    const renderBlogPost = ({ mainEntity }) => {
        return template\`
            <div>
                <h1>\${mainEntity.headline}</h1>
                <b>Auther: \${mainEntity.author.name}</b>
                <br/>
                <b>Tags: \${mainEntity.keywords.join(", ")}</b>
                <p>\${mainEntity.text}</p>
                \${mainEntity.image ?
                    \`<img src="\${mainEntity.image.contentUrl}"/>\` : null}
                \${mainEntity.image && mainEntity.image.thumbnail ?
                    \`<img src="\${mainEntity.image.thumbnail[0].contentUrl}"/>\` : null}
            </div>
        \`;
    };
    
    const renderList = ({ list }) => {
    
        return template\`
            <ul>
                \${list.map(item => \`
                    <li>
                        <a href="\${item.url}">\${item.headline}</a>
                    </li>
                \`)}
            </ul>
        \`;
    };
    
    const renderLanding = ({ mainEntity, options }) => {
        return template\`
            <div>
                <h1>\${mainEntity.headline}</h1>
                <p>\${mainEntity.description}</p>
                <b>My blogposts</b>
                \${renderList({list: mainEntity.allPosts})}
                <b>Blogposts tagged with "webdev"</b>
                \${renderList({list: mainEntity.postsByTag})}
                <b>Default options:</b>
                <p>Google Analytics Id \${options.googleAnalyticsId}</p>
            </div>
        \`;
    };
    
    // User defined options
    export const defaultOptions = {
        googleAnalyticsId: "UA-123"
    };
    
`.trim();
}

export function initSambalSite(): string {
    return`
export const siteConfig = {
    baseUrl: "https://example.com",
    collections: [
        {
            // collection of blogs sorted by date created
            uri: "/blogs/latest",
            include: ["pages/blogs/**/*"],
            sort: (a, b) => {
                return b.dateCreated.getTime() - a.dateCreated.getTime();
            }
        },
        {
            // collection of blogs group by tag
            uri: "/blogs/tag",
            include: ["pages/blogs/**/*"],
            groupBy: (mainEntity) => {
                return mainEntity.keywords.map(tag => ({
                    tag: tag
                }));
            }
        }
    ],
    resolvers: [
        {
            // resovle any url from https://dummydomain.com
            host: "dummydomain.com",
            resolveUri: async (uri) => {
                return {
                    "@type": "Person",
                    name: "Remote Person",
                };
            }
        }
    ],
    // theme: "sambal-ui-material"
};
`.trim();
}

export function initCss(): string {
    return`
h1 {
    color: blue
}
`.trim();
}

export function initBundle(cssPath: string): string {
    return`
function helloWorld() {
    console.log("hello world");
}

helloWorld();
`.trim();
}

export function initPerson(): string {
    return`
"@type": Person
name: Blue Devil
email: blue@devil.com
familyName: Devil
givenName: Blue
`.trim();
}

export function initBlogpost1(authorIRI: string): string {
    return`
---
"@type": BlogPosting
headline: My first blog
description: First blog generated by Sambal
author:
    "@id": ${authorIRI}
image:
    "@id": https://picsum.photos/200/300.jpg?output=webp&thumbnails=100w,50w
dateCreated: 2002-07-01
keywords: ["semantic", "json-ld"]
---

I am already SEO! Right click on this webpage, go to "View page source" and see that Facebook, Twitter, and application/ld+json meta tags are auto populated
`.trim();
}

export function initBlogpost2(): string {
    return`
---
"@type": BlogPosting
headline: My second blog
description: Second blog generated by Sambal
author:
    "@id": https://dummydomain.com/person/1
dateCreated: 2002-05-01
keywords: ["webdev", "semantic"]
---

I am already SEO! Right click on this webpage, go to "View page source" and see that Facebook, Twitter, and application/ld+json meta tags are auto populated
`.trim();
}

export function initIndex(): string {
    return`
headline: Welcome to Sambal!
description: Generate website directly from schema.org json-ld data.  Plain old json works too if you prefer.  /pages/index.yml is just json data!
allPosts:
    "@id": /blogs/latest
postsByTag:
    "@id": /blogs/tag?tag=webdev    
`.trim();
}